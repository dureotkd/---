1. 소프트웨어 개발 방법론

> 소프트웨어 개발 방법 모델 <

- 폭포수모델
(타당성 검토 -> 계획 -> 요구사항 분석 -> 설계 ->  구현 -> 테스트 -> 유지보수)

- 프로토타입 모델
(요구사항 분석 -> 프로토타입 개발 -> 프로토타입 평가 -> 구현 -> 테스트)

- 나선형 모델 [위험분석]
(계획 및 정의 -> 위험분석 -> 개발 -> 고객평가)

- 반복적 모델

> 소프트웨어 개발 방법론 <

구조적 방법론
- 정형화된 분석 절차에 따른 요구사항을 파악하여 문서화하는 체계적인 분석 이론
- 모듈의 분할과 정복 (Drive & 하향식 설계 방식)

정보공학 방법론
- 기업전체 기업의 주요부분을 계획 분석 설계 구축하여 정형화된 기법을 상호 연관성 있게 통합
데이터 중심 방법론

객체 지향 방법론
- 현실 세계의 개체를 속성과 메서드가 결합된 형태의 객체로 표현
- 개념화 단계 -> 상세화 단계 -> 구축 단계 -> 전이 단계

컴포넌트 기반 방법론 (CBD)
- 개발된 컴포넌트를 활용하여 조립 시스템 개발
- 요구파악 -> 분석 및 설계 -> 구현 -> 테스트

애자일 방법론

제품 계열 방법론

2. 소프트웨어 재공학

- 기존 시스템을 이용하여 더 나은 시스템 구축하고 새로운 기능 추가하여 성능 향상 시키는 것
- 품질향상 , 생산성 증가 , 수명 연장 , 오류 감소

CASE (computer Aided Software Engineering)
- 소프트웨어 개발 과정에서 사용되는 과정 전체 또는 일부를 컴퓨터와 전용 소프트웨어 도구를 사용하여 자동화 하는것
- 소프트웨어 생명 주기 전 단계의 연결 , 다양한 소프트웨어 개발 모형 지원 , 그래픽 지원

3. 소프트웨어 비용 결정 

하향식 비용 산정 기법

- 델파이 기법
  - 전문가 의견을 종합하여 산정하는 기법
  - 한명의 조정자와 여러 전문가로 구성

상향식 비용 산정 기법

- LOC(원시 코드 라인 수) 기법

- COCOMO 모형
  - LOC에 의한 비용 산정 기법 (보햄이 제안)
  - 조직형 (소규모 소프트웨어 5만라인 이하) 
  - 반분리형 (중간형 소프트웨어 30만 라인 이하)
  - 내장형 (초대형 소프트웨어 30만 라인 이상)

- Punam 모형
  - 소프트웨어 생명 주기의 전 과정 동안 사용될 노력의 분포를 예상하는 모형
  - Ralyeigh-Norden 곡선의 노력 분포도를 기반으로 함
  - 개발 기간이 늘어날수록 프로젝트 적용 인원의 노력이 감소

- 기능 점수 모형
  - 소프트웨어 기능을 증대시키는 요인별 기능 점수를 구한 후 산정
  - SLIM : Rayleigh-Norden 곡선과 putnam 예측 모델을 기초로 하여 개발된 자동화 추정 도구
  - ESTIMACS : FP 모형을 기초로하여 개발된 자동화 추정 도구

- PERT (프로그램 평가 및 검토 기술)
  - 전체 작업의 상호 관계를 표시하는 네트워크
  - 작업 예측치 = (비관치 + 4 * 기대치 + 낙관치) / 6

- CPM (임계 경로 기법)
  - 작업을 나열하고 작업에 필요한 소요 기간을 예측하는데 사용하는 기법

- 간트 차트
  - 작업 일정을 막대 도표를 이용하여 표시하는 프로젝트 일정표
  - 중간 목표 미달성 시 그 이유와 기간을 예측 할 수 있게 함

4. 소프트웨어 아키텍쳐

> 소프트웨어 아키텍쳐 4+1 뷰 <

  - 유스케이스 뷰  
     - 사용자 관점, 아키텍쳐를 도출하고 설계하며 다른 뷰를 검증하는데 사용되는 뷰
  - 논리 뷰 
     - 분석가/설계자 관점, 시스템의 기능적인 요구사항이 어떻게 제공되는지 설명해주는 뷰
  - 프로세스 뷰
     - 비기능적인 속성, 이벤트 처리 등을 표현한 뷰
  - 구현 뷰
     - 개발 환경 에서 정적인 소프트웨어 모듈의 구성을 보여주는 뷰
  - 배포 뷰
     - 컴포넌트가 물리적인 아키텍쳐에 어떻게 배치되는가를 매핑해주는 뷰

> 소프트웨어 아키텍쳐 패턴 <

  - 계층화 패턴
    - n-티어 아키텍쳐 패턴이라고도 하며, 하위 모듈들의 그룹을 나눌 수 있는 구조화된 프로그램 추상화 제공

  - MVC 패턴
	- MVC 패턴이라고도 하는 이 패턴은 대화형 애플리케이션 (interactive application)을 다음의 3 부분으로 나눈다.
	- 모델 (model) — 핵심 기능과 데이터를 포함한다
	- 뷰 (view) — 사용자에게 정보를 표시한다 (하나 이상의 뷰가 정의될 수 있음)
	- 컨트롤러 (controller) — 사용자로부터의 입력을 처리한다

  - 클라이언트 서버 패턴
	- 하나의 서버와 다수의 클라이언트

  - 파이프 필터 패턴
	- 데이터 스트림 생성하고 처리하는 시스템 사용 가능 (필터 컴포넌트) 데이터는 파이프를 통해 흐른다

  - 브로커 패턴
	- 분리된 컴포넌트들로 이루어진 분산 시스템 , 원격 서비스를 통해 서로 상호 작용 가능하며 브로커는 컴포넌트간 통신을 조정

> 소프트웨어 디자인 패턴 <

생성 패턴 (생프팩추싱)
  - Builder 
	- 복잡한 인스턴스를 조립하여 , 복합 객체를 생성할 때 객체를 생성하는 방법과 객체를 구현하는 방법 분리
  - Prototype
	- 일반적인 원형 복붙하여 부분만 수정
  - Factory Method
	- 상위 클래스에서 인터페이스 정의 후 오버로딩하여 생성 (오버로딩 : 같은 메서드를 매게변수 값만 다르게 하여 재사용하는 방법)
  - Abstract Factory
	- 구체적인 클래스 의존 안하고 서로 연관된 객체의 조합을 만드는 패턴
  - Singleton
	- 전역 변수를 사용하지 않고 객체 하나만 생성 (어디에서든지 참조 가능 하도록 하는 패턴)

구조 패턴 (브데퍼플프컴어)
  - Bridge
	- 기능과 구현 클래스 계층 연결 (독립적으로 확장)
  - Decorater
	- 기존에 구현되어있는 클래스에 필요한 기능을 추가해 나가는 설계 패턴
  - Facade
	- 단순한 인터페이스를 제공, 시스테메 간의 결합도를 낮춤
  - Flyweight
	- 클래스 경량화 목적 
  - Proxy
	- 정보 은닉 역할
  - Composite
	- 트리구조로 객체 관계를 표현
  - Adapter
	- 호환되지 않는 기존 클래스를 재사용 할 수 있게
	
행위 패턴 (메인템옵코스비스이)
  - Mediator
	- 느슨한 결합의 특성을 유지하기 위해 이를 통제하고 지시자인 중재자
  - Interpreter
	- 언어의 다양한 해석 
  - Template Method
	- 서브 클래스로 작업의 일부분을 수행
  - Observer
	- 한 객체의 상태가 바뀌면 그 객체에 의존해 다른 객체의 연락이 가고 자동으로 내용 갱신
  - Command
	- 요구사항을 객체로 캡슐화
  - State
	- 객체 상태를 캡슐화
  - Visitor
	- 메소드가 각 클래스를 돌아다니며 특정 작업을 수행
  - Strategy
	- 행위 객체를 클래스로 캡슐화해 동적으로 행위를 자유롭게 변환
  - Iterator
	- 집합체 안에있는 항목에 순차적으로 접근

요구공학

> 요구공학 프로세스 <

CMM 레벨3 요구사항 개발) 도출 > 분석 > 명세 > 확인 및 검증 (도분명확)

CMM 레벨2 요구사항 관리) 요구사항 변경 관리, 추적 관리

> 요구사항 도출 단계 주요 기법 <

인터뷰) 이해관계자와 직접 소통하여 얻는 비공식적 정보 수집
브레인스토밍) 말을 꺼내 쉬운 분위기로 만들어, 회의 참석자들이 내놓은 아이디어들을 비판없이 수용할 수 있도록 회의
델파이기법) 전문가의 경험적 지식을 통한 문제 해결
롤 플레잉) 현실에서 일어나는 장면을 설정하고 여러 사람이 갑자기 맡은 역을 연기함으로써 요구사항 분석
워크숍) 전문 영역별로 팀 협력 하여 사전 준비가 요구 & 단기간에 집중적인 노력을 통함
설문 조사 ) 설문지 또는 여론조사 

> 요구사항 분석 단계 <

데이터 흐름도 (DFD) : 분석과 설계에서 매우 유용하게 사용되는 다이어그램
자료 사전 (DD) : 자료 요소, 자료 요소들의 집합, 자료 흐름 단위 관계 범위를 구체적으로 명시하는 사전
UML : 객체 지향 소프트웨어 개발 과정에서 산출물을 명세화

> 요구사항 명세 단계 <

비정형 명세 기법 : 사용자의 요구를 표현할떄 자연어를 기반으로 서술 , 사용자와 개발자 이해가 용이 , 명확성 및 검증에 문제
정형 명세 기법 : 사용자의 요구를 표현할 때 수학적인 원리와 표기법으로 서술하는 기법,표현이 간결,명확성 및 검증 용이

> 요구사항 확인 및 검증 단계 <

동료 검토 (Peer Review) : 2~3명이 진행하는 리뷰 , 요구사항 명세서 작성자가 명세서를 설명하고 이해관계자들이 들으면서 결함을 발견하는 형태로 진행

워크 스루 (Walk Through) : 오류를 조기에 검출하는데 목적이 있는 검토 방법 , 검토 자료를 회의 전에 배포해서 사전검토 한 후 짧은 시간 동안 회의 진행 (비공식적인 검토 방법)

인스펙션 (Insepction) : 소프트웨어 요구,설계,원시 코드 등의 저작자 외의 다른 전문가 또는 팀이 검사하여 오류를 찾아내는 공식적인 검토 방법 

[절차] : 계획 -> 사전 교육 -> 준비 -> 인스펙션 회의 -> 수정 -> 후속 조치